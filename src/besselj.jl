#    Bessel functions of the first kind of order zero and one
#                       besselj0, besselj1
#
#    Calculation of besselj0 is done in three branches using polynomial approximations
#
#    Branch 1: x <= pi/2
#              besselj0 is calculated using a 9 term, even minimax polynomial
#
#    Branch 2: pi/2 < x < 26.0
#              besselj0 is calculated by one of 16 different degree 13 minimax polynomials
#       Each polynomial is an expansion around either a root or extrema of the besselj0.
#       This ensures accuracy near the roots. Method taken from [2]
#
#   Branch 3: x >= 26.0
#              besselj0 = sqrt(2/(pi*x))*beta(x)*(cos(x - pi/4 - alpha(x))
#   See modified expansions given in [2]. Exact coefficients are used.
#
#   Calculation of besselj1 is done in a similar way as besselj0.
#   See [2] for details on similarities.
#
# [1] https://github.com/deepmind/torch-cephes
# [2] Harrison, John. "Fast and accurate Bessel function computation."
#     2009 19th IEEE Symposium on Computer Arithmetic. IEEE, 2009.
#

"""
    besselj0(x::T) where T <: Union{Float32, Float64}

Bessel function of the first kind of order zero, ``J_0(x)``.
"""
function besselj0(x::Float64)
    T = Float64
    x = abs(x)

    if x < 26.0
        x < pi/2 && return evalpoly(x * x, J0_POLY_PIO2(T))
        n = unsafe_trunc(Int, TWOOPI(T) * x)
        root = @inbounds J0_ROOTS(T)[n]
        r = x - root[1] - root[2]
        return evalpoly(r, @inbounds J0_POLYS(T)[n])
    else
        xinv = inv(x)
        iszero(xinv) && return zero(T)
        x2 = xinv * xinv

        if x < 120.0
            p1 = (one(T), -1/16, 53/512, -4447/8192, 3066403/524288, -896631415/8388608, 796754802993/268435456, -500528959023471/4294967296)
            q1 = (-1/8, 25/384, -1073/5120, 375733/229376, -55384775/2359296, 24713030909/46137344, -7780757249041/436207616)
            p = evalpoly(x2, p1)
            q = evalpoly(x2, q1)
        else
            p2 = (one(T), -1/16, 53/512, -4447/8192)
            q2 = (-1/8, 25/384, -1073/5120, 375733/229376)
            p = evalpoly(x2, p2)
            q = evalpoly(x2, q2)
        end

        a = SQ2OPI(T) * sqrt(xinv) * p
        xn = muladd(xinv, q, -PIO4(T))

        # the following computes b = cos(x + xn) more accurately
        # see src/misc.jl
        b = cos_sum(x, xn)
        return a * b
    end
end
function besselj0(x::Float32)
    T = Float32
    x = abs(x)

    if x <= 2.0f0
        z = x * x
        if x < 1.0f-3
            return 1.0f0 - 0.25f0 * z
        end
        DR1 = 5.78318596294678452118f0
        p = (z - DR1) * evalpoly(z, JP_j0(T))
        return p
    else
        q = inv(x)
        iszero(q) && return zero(T)
        w = sqrt(q)
        p = w * evalpoly(q, MO_j0(T))
        w = q * q
        xn = q * evalpoly(w, PH_j0(T)) - PIO4(Float32)
        p = p * cos(xn + x)
        return p
    end
end

"""
    besselj1(x::T) where T <: Union{Float32, Float64}

Bessel function of the first kind of order one, ``J_1(x)``.
"""
function besselj1(x::Float64)
    T = Float64
    s = sign(x)
    x = abs(x)

    if x <= 26.0
        x <= pi/2 && return x * evalpoly(x * x, J1_POLY_PIO2(T))
        n = unsafe_trunc(Int, TWOOPI(T) * x)
        root = @inbounds J1_ROOTS(T)[n]
        r = x - root[1] - root[2]
        return evalpoly(r, @inbounds J1_POLYS(T)[n]) * s
    else
        xinv = inv(x)
        iszero(xinv) && return zero(T)
        x2 = xinv * xinv
        if x < 120.0
            p1 = (one(T), 3/16, -99/512, 6597/8192, -4057965/524288, 1113686901/8388608, -951148335159/268435456, 581513783771781/4294967296)
            q1 = (3/8, -21/128, 1899/5120, -543483/229376, 8027901/262144, -30413055339/46137344, 9228545313147/436207616)
            p = evalpoly(x2, p1)
            q = evalpoly(x2, q1)
        else
            p2 = (one(T), 3/16, -99/512, 6597/8192)
            q2 = (3/8, -21/128, 1899/5120, -543483/229376)
            p = evalpoly(x2, p2)
            q = evalpoly(x2, q2)
        end

        a = SQ2OPI(T) * sqrt(xinv) * p
        xn = muladd(xinv, q, -3 * PIO4(T))

        # the following computes b = cos(x + xn) more accurately
        # see src/misc.jl
        b = cos_sum(x, xn)
        return a * b * s
    end
end
function besselj1(x::Float32)
    T = Float32
    s = sign(x)
    x = abs(x)

    if x <= 2.0f0
        z = x * x
        Z1 = 1.46819706421238932572f1
        p = (z - Z1) * x * evalpoly(z, JP32)
        return p * s
    else
        q = inv(x)
        iszero(q) && return zero(T)
        w = sqrt(q)
        p = w * evalpoly(q, MO132)
        w = q * q
        xn = q * evalpoly(w, PH132) - THPIO4(T)
        p = p * cos(xn + x)
        return p * s
    end
end
"""
    besselj(nu, x::T) where T <: Union{Float32, Float64}

Bessel function of the first kind of order nu, ``J_{nu}(x)``.
Nu must be real.
"""
function _besselj(nu, x)
    nu == 0 && return besselj0(x)
    nu == 1 && return besselj1(x)
    if x < 20.0
        if nu > 60.0
            return log_besselj_small_arguments_orders(nu, x)
        else
            return besselj_small_arguments_orders(nu, x)
        end
    elseif x > 1.85*nu
        return besselj_large_argument(nu, x)
    end
    if nu <= 100
        if 2.5*x < nu
            return besselj_debye(nu, x)
        elseif x <= nu
            v = nu + ceil(nu*1.3)
            jnu = besselj_debye(v, x)
            jnup1 = besselj_debye(v+1, x)
            return besselj_down_recurrence(x, jnu, jnup1, v, nu)[2]
        else
            v = floor(nu - x/3)
            v2 = nu - v
            jnu = besselj_large_argument(v2, x)
            jnum1 = besselj_large_argument(v2 -1, x)
            return besselj_up_recurrence(x, jnu, jnum1, v2, nu)[2]
        end
    elseif 2*x < nu
        return besselj_debye(nu, x)
    end
end

function _α_αp_asymptotic(v, x::T) where T
    μ = 4 * v^2
    s0 = 1
    s1 = (1 - μ) / 8
    s2 = evalpoly(μ, (-25, 26, -1)) / 128
    s3 = evalpoly(μ, (1073, -1187, 115, -1)) / 1024
    s4 = evalpoly(μ, (-375733, 430436, -56238, 1540, -5)) / 32768
    s5 = evalpoly(μ, (55384775, -64709091, 9716998, -397190, 4515, -7)) / 262144
    s6 = evalpoly(μ, (-24713030909, 29215626566, -4733751627, 235370036, -4238531, 24486, -21)) / 4194304

    if x < 18*v
        s7 = evalpoly(μ, (7780757249041, -9268603618823, 1573356635461, -87480924739, 1989535379, -18939349, 63063, -33)) / 33554432
        s8 = evalpoly(μ, (-26308967412122125, 31505470994964360, -5517359285625804, 329343318168440, -8593140373614, 106122595896, -598859404, 1252680, -429)) / 2147483648
        s9 = evalpoly(μ, (14378802319925055947, -17285630127691126691, 3095397360215483916, -194026764558396188, 5536596631240042, -79979851361130, 597489288988, -2163210764, 3026595, -715)) / 17179869184
        s10 = evalpoly(μ, (-19740662615375374580231, 23801928703130666089534, -4334421752432088249971, 281576004385356401192, -8556293060689145118, 137164402798287604, -1216961874423502, 5925778483368, -14587179035, 14318590, -2431)) / 274877906944
        s11 = evalpoly(μ, (16629305448257355302267575, -20097626064642945009122253, 3708133715826433118900337, -247560495216085669748963, 7882145023568373727078, -136097258378143928354, 1355921534379626242, -7938052610367302, 26616800349043, -46575001473, 33302269, -4199)) / 2199023255552
        s12 = evalpoly(μ, (-67471218624230362526181277601, 81699279492428006742420030332, -15233583205322702897380357650, 1039206680182498322210164588, -34303895772550410316410943, 626292216963766324300664, -6784356890740220944060, 45038004674954790968, -183408097342762543, 441734362333708, -569135407698, 305569628, -29393)) / 70368744177664
        s13 = evalpoly(μ, (81121053093143918050102987600099,  -98383136980007985475571939027975, 18503851640550924693860888790250, -1284587641197372537980918233562, 43642612323123398148213493825, -832261743620394930038568309, 9606500048207046619311900, -69893489053616393418780, 325411350127146969525, -959952773579760385, 1717262634951770, -1676314996330, 692939975, -52003)) / 562949953421312
        s14 = evalpoly(μ, (-228157352303612028397376534489640325, 277077347242874183788397478754999038, -52491165251522858022045953021809887, 3697262087110858234228068530237484, -128600978847262037677344810847005, 2539782323449194167276463807490, -30817592327971506033132319983, 240497347453138555094414952, -1235549362984466458531719, 4196370118897802443810, -9261095606965424565, 12645235160277420, -9576039800535, 3112379550, -185725)) / 9007199254740992
        s15 = evalpoly(μ, (371041630683099249807974389133866983377, -451112034187704470803165906576733421647, 85988274811534523057441254130668147353, -6130978215793605437752467509125332519, 217471845675333794186294440183867941, -4420326695043375922589356428203067, 55848055372320369378877454341437, -460715085251545483652077162563, 2553326909107535727375084819, -9625584690294666238157261, 24605658995427696249035, -41705538308621290485, 44458969761562935, -26644714149225, 6931814175, -334305)) / 72057594037927936
        s16 = evalpoly(μ, (-11055456952814105837238472522288088536664893, 13454471487641055458960459954964458339717648, -2578203195682435666976648565353960682213208, 185749848931968563987894480305354570867632, -6698863257342477965063978897873174851692, 139481675127549715032105727774178109456, -1822128051193260958105844837015204328, 15725987489026953079045248214882608, -92581200678991239243237978998382, 378391463021683664380997574832, -1079160251083042147293256808, 2129855479977547288466320, -2833691714368635092460, 2403859191332320560, -1159686836761560, 245240799120, -9694845)) / 9223372036854775808
        s17 = evalpoly(μ, (23373626496469884942898309902021582362191922675, -28470163678198171216731489192530581706160067107, 5480697895889118815544614489283816937852790808, -398429679951285151272097987810023499140966008, 14574587268291892957048020704423735025526308, -309746111147584727757459007548519123051204, 4161694266070984983741813756535503455880, -37290601157202922291181203252458959208, 230645968939091255561083278221370498, -1005697894606904987899324994096258, 3123402733071240567892677464424, -6908647765673021748575217288, 10752551023194100444762820, -11438303805173540795940, 7848750944406750840, -3093101181782040, 538868569635, -17678835)) / 73786976294838206464
        s18 = evalpoly(μ, (-111361378724077990746416029998046616050509978921539, 135746253866557423310337353662450724289897542908910, -26237613408296752490352020229134990522792887791555, 1922413096483679043237547734628813570357439558480, -71193778846050128718754631795120857490490262940, 1539945890173645033009867772439624727099098888, -21192458264539017819644078826589342129355820, 196005261947029152728400647710967544425520, -1263269593655108070478649445999468867210, 5808826406855320404193987142684204180, -19320522675016202958543734862586394, 46720207634051084004638119118640, -81821508434755789651511496140, 102238756592473887441057800, -88342292721143516508540, 49731073018185955920, -16216326143326155, 2354997610350, -64822395)) / 1180591620717411303424
        s19 = evalpoly(μ, (296910456667588147659333126541181625529873470176387611, -362168882223415616126501055899626700448641997962436017, 70251550305228319355272475757988113288672713290068649, -5182946608226016261211397666049774183662333597959843, 194024192762965317463261535095424641741096903713740, -4261643524285090368342561247478476304909756975140, 59874804181817284044814186630099605178719724308, -568996974525130964287568610366892787350713372, 3797469476403853060187807038916907856444554, -18255704174861238533251400128344883661470, 64248268923367993194175398884766099134, -166959400640594454410097385012706986, 320789414254074176405482585976668, -452658056185691378860864973396, 461117533742477601983387620, -328101083672095141216140, 153409543392289776435, -41861134526619705, 5120645093025, -119409675)) / 9444732965739290427392
        s20 = evalpoly(μ, (-3522756479350769975281617581321545613436218503050695678075, 4299614895888804153638859172375174476343649375612057689548, -836668815038360513614015909500916883814666806927189456922, 62106073474456005680385514002110287639480560824420522572, -2347188049597150004773910816777966916365233392848818383, 52253378249058169018788729968582230155091725819403248, -747525719315527247430397518232787428614442113610808, 7272703760709817711041445391295675625095681479472, -50014808087576306896550631589875112629326379366, 249703271598736427498837466608381894119961384, -921490701557006964516502956379076579410908, 2541508538413242992463438567320581532520, -5263930474873605158754566071747209670, 8174852381652706781000230751680944, -9434610352121065739568921445176, 7940288733304487926761165680, -4708399899738360283359135, 1848563918930071955820, -426360380309828250, 44340633437100, -883631595)) / 302231454903657293676544
        s21 = evalpoly(μ, (11562276954986118012905102199683696291379295134175971428710681, -14119692164821110293665160297543402876375196726712887276312589, 2755406866078403474813432478656763881170404858419576582318658, -205656094951908425907179975052824686393072466342278961851682, 7838489779258317368644351328312885893374241287287353084601, -176592546564392815596485971618573980366372738228899109621, 2566787812765782386429803068290417713174219989532914232, -25491012879019728230635774403534977262786325300355192, 179927911347099874189887493701009277459349916599058, -928046707950409032184149251437603291238784411418, 3566217731951601523416356645128571391393644908, -10341539254212039773512248413902653009876588, 22795587653797465357095136224432136887194, -38269170424460587731145121489014195346, 48747802517834826879462968473185912, -46616094912209768370505289864248, 32792808824738132450074479925, -16377399358557323704388985, 5451622125827462423970, -1072351920527800770, 95608054947405, -1641030105)) / 2417851639229258349412352 
        s22 = evalpoly(μ, (-83575806038418315461424176577671655789355064557837328722810810363, 102111532013648986390182274849560087911661660674277144494797501754, -19977913701325081051291504480331200861144453506726454660745981317, 1498443541140890887172300157818040316416714142527798061250817212, -57547003724390053887422306176263229331882560978641824071987057, 1310310808212309513721016150148686278236604804419891613787474, -19316068320832072657353419945987646188788279627258096785919, 195341227604691010556855787014189633450322695864689236944, -1410665489867534572898459538217020115453133972348502334, 7485394143628926776948795385198929132335854093895444, -29787113195477122503729199863502980387883252587074, 90162658590453244373324847901139399254001605096, -209478021420133615969565305958096327404239122, 375208862896212544106945468927927982466132, -517984688643055190232315977490791270222, 548137112105626862660002531852535248, -439288846984271326190410593921911, 260970963105735443862130025650, -110807313735818965400395785, 31544857671806945481660, -5334592853046971085, 410825322666330, -6116566755)) / 38685626227668133590597632
        s23 = evalpoly(μ, (331139932088074229583414385100484655583680323667219743432336893156375, -404761010994322659981740621417860548337506367222213959945034952405505, 79375107881275741011145002562545397482099096278323149191979217848795, -5980024707389856192480549544360322543977054376671317889548708990765, 231232610198222735170897082923113351106311448954569056231279745105, -5315419792588167914145829820169688781060054431572005135138461431, 79351500724953350171887383695707759766649852034188528391425045, -815520743985617485488470918603434536997805249424041983026435, 6009489576683595225413677597538524950365012612475993703590, -32693239520459805541072665529457785351317642575409616330, 134127831970732580141105863110451473403320285914221422, -421344902055805903571049169837400505463026456600930, 1024076418574775828492136039568457134302239053890, -1937725438179908789638378729405097765038430670, 2860677199060789249610678847660962264016810, -3288461736992539205784287844732495870726, 2923321014828730506772945071926726355, -1983287321121666482640542827954725, 1004162610804693250453533074375, -365547374035954079474050785, 89694586000567590763485, -13135766477702211915, 879776379205425, -11435320455)) / 309485009821345068724781056
        s24 = evalpoly(μ, (-11460470635629791545293372484006750122731817670656977258332556688633398921, 14014111505802311026665654556958455368190143118279169566775230812828711608, -2754045312221731365346800318745138513760434182644947440110635145128118868, 208324629757756119539887071410085261846231054839500347331614562331870856, -8105306990699817776465002381403873045496081436849592851326212688042930, 187927358523600279487081628876937144137383565949179064175790471702376, -2837440960584915871183716261829833363096514551129018419965987130436, 29585333404910010295435037804846483274351006167295070952283026520, -221970214270207127150632290469188405104591920361499699260389575, 1234562246394448342011056423641453973409852545995108093923760, -5202879714837953377224769143131813528966172834588809583784, 16883585637409754238127214329328823438340567417621760208, -42672645377509299293082661872272090002235553201735996, 84640259308513240076102188894192666414468595521872, -132275246878102596227254163245303375859517889320, 162948427496032610672483414621797748943261744, -157694170353957908988423048181218400323495, 118930405144020217084786109082007952664, -68919031103634934082636426953210628, 29984518585214620810437808556840, -9429541537363253968235837490, 2008334977729096678954440, -256393587362636099220, 15027383316324600, -171529806825)) / 19807040628566084398385987584
        s25 = evalpoly(μ, (53934542917465252257872000137728594960259370390866516239913881025916526618079, -65976815351979191514013436582276621696037856185100381323811701400123478350151, 12990859903190819767771277173922248418040797693438193819626123246996727763924, -986289196021334429598185221309997436594513963183161881910145274005112055556, 38589848892013007447965728844309701385952705788909865709295830738464656854, -901732338416406447829099270632322366537973763750405411674611994211884982, 13754985750489437020150084701211239326753483840283744285085048168887348, -145296487872202817071834551731992888383906147134262530708479742919492, 1107852113346147934451530333019409136722319574358275961326610338745, -6284447661214506168310202232419921778046818764894109430624191425, 27124391704832276375378035229827447472267671305885516783908200, -90579066415559029033446553653965206980661508469619065122888, 236921718948838484290563377929843042878945006979548048852, -489582335595648899206286073510649002814836556024449492, 803546924176475361367194165347536643073090978134088, -1049874615794655300129423477494049697668965354856, 1090921486669506169688142948646361250033103041, -897447046116032022931540194969487137324729, 579285958780450202216840934739373500228, -289042720546332850118715441421680692, 108860571736252830951542456446390, -29778127018305105531623841750, 5540491150978764772764420, -620318440935315513300, 31997684754555975, -322476036831)) / 158456325028528675187087900672
        s26 = evalpoly(μ, (-550362189374765423500020131694326871682947579295544126673454219279357840448787475, 673474540445653165097469530811639715030184284678513241901879111803771300974560774, -132843306523995345830830790301920189208579760537806586066532903781971404919028471, 10119716401044602598547436013299934060816525295000642596922239980740289514077464, -397984251496382810057558626001455259349582556891230525089025890178624740805426, 9365976765046902955936322300984376349463066112864638170465082090070459810828, -144202618664720643539154196259069508936470334045124013174312118132635730258, 1541268563482264821733153244434252845039676711071618846131329709235798072, -11924109086784630671902444007218893865417530446493249726209690870741433, 68850403902117609730665474296934648018000334821883146969897474938330, -303573934725339276628453846224414840422909218274232063761029728957, 1039929348025793684367471554854627430067811771656990473105571888, -2803810575751562150406590598593666192836314853381860916413356, 6006121001412454529935820912360762597858661908957386258344, -10287669718072870028476255463139544436162416218994465932, 14141085982837452113877229626968207248935797973216048, -15612081113338031406691783944922755502249136499861, 13814841005616967281507601209269830356947816730, -9744490403903133848524108305681120523846465, 5425864545536715503374357393342487043768, -2348028894354034128703204634739556482, 770676329325936928765925025265420, -184519700672202596543835960450, 30167504281690397397158040, -2978481656224275543615, 135923004572192838, -1215486600363)) / 2535301200456458802993406410752
        s27 = evalpoly(μ, (3034766102252701518157589464572634173727080006716405186421561822693903178222865453267, -3714792754552146381143399215357421132324512594933927037160786389545967909052342612209, 733946019586332057694627344519609691505114169934498357977357346958058975757065505005, -56083725964076635895744531425138465919432829322712289673161638652063716379066462215, 2216043410750309023932982985070868698985478186407806393141360294004890025943198090, -52491055348000482104122152189863250131359278473985994635664946071742204717323854, 815058418261954448107293230750826473065550287087398221401112444183687821279806, -8805255111079079336374463414380115404435700759914469371598474477417223017370, 69027164720990526029240636658930131205677059730900234667535242433097074161, -404996897924032627265358852167699489700618554104702707868970603595198491, 1820308721819928686570797781124614778454010567761204382775217813876903, -6379691615889053454414290791655251340101395503722656901263667198869, 17671619592072200881064220041665643126872351595003533197000304732, -39080495831276692607567240277191495033180367037410340189342132, 69500559940874112365836960661406024121439848953110460077172, -99857930856082720326359361513785333411820343692595376412, 116172037520695141323879606006603233207541346449393285, -109400812677637805606914204549170843912544659089943, 83143038039832916637956789152649648497314155371, -50675452490850399934703562637702549877087681, 24514120471966581387575303368968009290106, -9261147666508811758073848019756164382, 2665274485248682075861896295849070, -561737706437007489700084464810, 81134371682009320652590935, -7099863760968377393085, 288025351281817569, -2295919134019)) / 20282409603651670423947251286016
        s28 = evalpoly(μ, (-72131781191647102180135979166018125213328009812988639643980373344199924546055031219841657, 88320720553877044898016539857591409048541934216984061246144406353930481760466659135310060, -17476288340029290013244384062063718700017020569598272422382306529077447996191083120944250, 1339249806505389936360679880350661005143397811790702381254671942509756480768691050430780, -53147653291249013517567215476928286085680620344084765055885408763582768328625269986515, 1266428000416318763460583208865588275947660408675059698889268273293866046141098646088, -19817910750548832205286511761977528667151953139167471097483757983625632824415854052, 216200733319998411897616656521528132036058294484119226909293000883829666320165320, -1715357860632234663803938553870596959687369271423120785238819271587494683750241, 10211678103637396902724570320414980517346978304968771663479533793948404676100, -46701485080026857458041597651829261081340501743039967654292046914103115238, 167077796119918348572545316722339899638809234995433324513630413185024980, -474152155227979464991161392169467129570306842144689118967678169058355, 1078820952308996014951396457847753147289281214958590369482040062640, -1983540755079932526194570933278727505224710158375196934944380920, 2963296259673455351858339135295437559242914546967478677045808, -3608828356685398684317572170795607088256593908628099432291, 3586567769194371717203744378289395696784836160566682420, -2905229230929609915630859596422130790818280882266278, 1910802363080455301530232591650967617033975786020, -1013391555129635701107834029596318350575760529, 428647483469320100810247742835039527501960, -142218821054781826089282598333880233700, 36088125713407805490928679853329800, -6730529722692741129622542935235, 863054096983483927763931228, -67251582884092645505082, 2436107956342200140, -17383387729001)) / 649037107316853453566312041152512

        αp = evalpoly((1/x)^2, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28))
        α = x * (evalpoly((1/x)^2, (s0, -s1, -s2/3, -s3/5, -s4/7, -s5/9, -s6/11, -s7/13, -s8/15, -s9/17, -s10/19, -s11/21, -s12/23, -s13/25, -s14/27, -s15/29, -s16/31, -s17/33, -s18/35, -s19/37, -s20/39, -s21/41, -s22/43, -s23/45, -s24/47, -s25/49, -s26/51, -s27/53, -s28/55)))
    else
        αp = evalpoly((1/x)^2, (s0, s1, s2, s3, s4, s5, s6))
        α = x * (evalpoly((1/x)^2, (s0, -s1, -s2/3, -s3/5, -s4/7, -s5/9, -s6/11)))
    end
    α = α - T(pi)/4 - T(pi)/2 * v
    b = sqrt(2 / T(pi)) / sqrt(αp * x)

    return α, b
end
# to acurrately use x > 1.7*nu
function besselj_large_argument(v, x::T) where T
    α, b = _α_αp_asymptotic(v, x)
    return cos(α)*b
end
function bessely_large_argument(v, x::T) where T
    α, b = _α_αp_asymptotic(v, x)
    return sin(α)*b
end

# this needs a better way to sum these as it produces large errors
# only valid in non-oscillatory regime (v>1/2, 0<t<sqrt(v^2 - 0.25))
# power series has premature underflow for large orders
# gives wrong answers for x > 20.0 (might want to fix this)
function besselj_small_arguments_orders(v, x::T) where T
    MaxIter = 1000
    out = zero(T)
    a = (x/2)^v / gamma(v + one(T))
    t2 = (x/2)^2
    for i in 0:MaxIter
        out += a
        abs(a) < eps(T) * abs(out) && break
        a *= -inv((v + i + one(T)) * (i + one(T))) * t2
    end
    return out
end

# this needs a better way to sum these as it produces large errors
# use when v is large and x is small
# need for bessely 
function log_besselj_small_arguments_orders(v, x::T) where T
    MaxIter = 1000
    out = zero(T)
    a   = one(T)
    x2 = (x/2)^2
    for i in 0:MaxIter
        out += a
        a = -a * x2 * inv((i + one(T)) * (v + i + one(T)))
        (abs(a) < eps(T) * abs(out)) && break
    end
    logout = -loggamma(v + 1) + fma(v, log(x/2), log(out))
    return exp(logout)
end

# valid when x < v (uniform asymptotic expansions)
function besselj_debye(v, x)
    T = eltype(x)
    S = promote_type(T, Float64)
    x = S(x)

    vmx = fma(v,v, -x^2)
    vdx = v/x
    b = sqrt(vmx)

    n = v * log(vdx + sqrt(vdx^2 - 1)) - b
    coef = SQ1O2PI(S) * exp(-n) / sqrt(b)
    p = v / b
    p2  = v^2 / vmx

    return coef * Uk_poly_Jn(p, v, p2, T)
end

function besselj_debye_large_order(v, x)
    T = eltype(x)
    α = asech(x/v)
    coef = exp(v*(tanh(α) - α))
    coef /= sqrt(2*T(pi)*v*tanh(α))
    p = coth(α)
    p2 = p^2

    return coef * Uk_poly_Jn(p, v, p2, T)
end

# For 0.0 <= x < 171.5
# Mean ULP = 0.55
# Max ULP = 2.4
# Adapted from Cephes Mathematical Library (MIT license https://en.smath.com/view/CephesMathLibrary/license) by Stephen L. Moshier
function gamma(x)
    if x > 11.5
        return large_gamma(x)
    elseif x < 0.0
        #p = floor(x)
        #isequal(p, abs(x)) && return throw(DomainError(x, "NaN result for non-NaN input."))
        # need reflection formula
        return throw(DomainError(x, "Negative numbers are currently not implemented"))
    elseif x <= 11.5
        return small_gamma(x)
    elseif isnan(x)
        return x
    end
end
function large_gamma(x)
    isinf(x) && return x
    T = Float64
    w = inv(x)
    s = (
        8.333333333333331800504e-2, 3.472222222230075327854e-3, -2.681327161876304418288e-3, -2.294719747873185405699e-4,
        7.840334842744753003862e-4, 6.989332260623193171870e-5, -5.950237554056330156018e-4, -2.363848809501759061727e-5,
        7.147391378143610789273e-4
    )
    w = w * evalpoly(w, s) + one(T)
    # lose precision on following block
    y = exp((x)) 
    # avoid overflow
    v = x^(0.5 * x - 0.25)
    y = v * (v / y)

    return SQ2PI(T) * y * w
end
function small_gamma(x)
    T = Float64
    P = (
        1.000000000000000000009e0, 8.378004301573126728826e-1, 3.629515436640239168939e-1, 1.113062816019361559013e-1,
        2.385363243461108252554e-2, 4.092666828394035500949e-3, 4.542931960608009155600e-4, 4.212760487471622013093e-5
    )
    Q = (
        9.999999999999999999908e-1, 4.150160950588455434583e-1, -2.243510905670329164562e-1, -4.633887671244534213831e-2,
        2.773706565840072979165e-2, -7.955933682494738320586e-4, -1.237799246653152231188e-3, 2.346584059160635244282e-4,
        -1.397148517476170440917e-5
    )

    z = one(T)
    while x >= 3.0
        x -= one(T)
        z *= x
    end
    while x < 2.0
        z /= x
        x += one(T)
    end

    x -= T(2)
    p = evalpoly(x, P)
    q = evalpoly(x, Q)
    return z * p / q
end
